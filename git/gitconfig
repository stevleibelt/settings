[user]
    name    = stevleibelt
    email   = stev@leibelt.de

[color]
    ui          = auto
    diff        = auto
    status      = auto
    branch      = auto
    interactive = auto

[color "branch"]
    current = yellow
    local   = green
    remote  = red

[color "diff"]
    mega    = yellow bold
    frag    = magenta bold
    old     = red bold
    new     = green bold

[color "status"]
    added       = yellow
    changed     = green
    untracked   = red

[core]
    exludesfiles    = ~/.gitignore.global
    whitespaces     = trailing-space, space-before-tab
    pager           = less -RSX
    edit            = vim
    #safecrlf       = true
    #autocrlf       = false

[grep]
    extendedRegexp  = true

[log]
    #abbrevCommit   = true

[merge]
    conflictStyle   = diff3
	tool = meld

[mergetool]
    #todo
    #http://vim.wikia.com/wiki/A_better_Vimdiff_Git_mergetool
    #http://stackoverflow.com/questions/14904644/how-do-i-use-vimdiff-to-resolve-a-conflict
    #
    #keepBackup      = false
    #keepTemporaries = false
    #prompt          = false

[apply]
    #whitespace  = fix

[push]
    # 'nothing' : do not push anything
    # 'matching': push all matching branches (default)
    # 'upstream' : push current branch to whereever it is pointing
    # 'current' : push current branch
    #default = upstream

[pull]
    # be careful here
    # do not pull --no-rebase over a local line containing a true merge
    #rebase = true

[alias]
    #log
    log-head                    = !git log | head
    #@todo find better naming - figure out what it dues
    log-history                 = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --date-order
    #@todo find better naming - figure out what it dues
    log-local                   = !git log-oneline ORIG_HEAD.. --stat --no-merges
    #@todo find better naming - figure out what it dues
    log-oneline                 = !git log --pretty=oneline --abbrev-commit --graph
    log-tail                    = !git log | tail
    list-latest-commit-message  = !git log | head | grep '^  '

    #diff
    show-changes            = diff --name-status
    show-changes-in-cached = diff --cached
    show-changed-status    = diff --stat
    duff                    = diff  #praise to good of simpsons

    #cancel
    amend   = commit --amend
    unmerge = reset --merge ORIG_HEAD
    unadd   = reset HEAD --
    undo    = reset --soft HEAD^
    unstage = reset HEAD --

    #general
    show-current-checkout        = describe --all

    #info
    #@todo find better naming
    track   = "!f() { ([ $# -eq 2 ] && ( echo \"Setting tracking for branch \" $1 \" -> \" $2;git branch --set-upstream $1 $2; ) || ( git for-each-ref --format=\"local: %(refname:short) <--sync--> remote: %(upstream:short)\" refs/heads && echo --Remotes && git remote -v)); }; f"

    #branch
    #@todo find better naming - figure out what it dues
    branch-serve-local                      = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git
    create--branch-from-master              = checkout --no-track origin/master -b
    create--branch-from-origin              = "!f() { git checkout -b $1 origin/$1; git pull origin $1; git push --set-upstream origin $1; }; f"
    #delete-branches-merged-into-master     = !git branch --merged master | grep -v 'master$' | xargs git branch -d && git remote prune origin
    #delete-already-merged-local-branches   = !git branch --merged origin/master | grep -v 'master' | xargs -n 1 git branch -d
    #list-all-already-merged-local-branches = !git branch --merged origin/master | grep -v 'master'
    list-all-branches-in-detail             = branch -avv
    list-current-branch                     = !git status | grep 'On branch ' | cut -d' ' -f3
    list-local-branches                     = branch -l
    list-merged-branches                    = branch --merged
    list-not-merged-branches                = branch --no-merged
    list-remote-branches                    = branch -r
    list-remote-branches-in-detail          = ls-remote --heads origin
    #@see: http://stevenharman.net/git-clean-delete-already-merged-branches
    search-term-in-branch-list              = "!f() { git branch -a | grep -i $1; }; f"

    #files
    #git add .
    add-all-files           = add -A
    add-all-modified-files  = !git-ls-files -m -z | xargs -0 git-add && git status
    add-all-new-files       = !git-ls-files -o --exclude-standard -z | xargs -0 git-add && git status
    #@todo find better naming
    delete-all-marked-files = !git ls-files -d -z | xargs -0 git-rm && git status

    #unknown :->
    lint-uncommited-php-files   = ! git status --porcelain | /bin/grep -e '^.\\(M\\|?\\).*\\.php$' | awk '{print $2}' | xargs -L 1 php -l

    #remove local changes
    remote-local-changes = clean -f -d

    #stash
    unstash = stash pop

    #push
    #push-to-current-head  = push -u origin HEAD
    push-to-current-head  = push origin
    #push-to-master  = push -u origin master

    #pull
    #pull-from-current-head  = pull origin --no-ff
    pull-from-current-head  = "!f() { CURRENT_BRANCH_NAME=$(git list-current-branch); git pull origin ${CURRENT_BRANCH_NAME}; }; f"

    #upstream
    merge-with-the-upstream-master  = merge upstream/master
    rebase-with-the-upstream-master = rebase upstream/master

    #tags
    list-newest-version-tag     = !git tag -l | sort -V | tail -n1
    list-newest-version-tags    = !git tag -l | sort -V | tail

# links | sources
# * https://github.com/MattKetmo/dotfiles/blob/master/git/gitconfig
